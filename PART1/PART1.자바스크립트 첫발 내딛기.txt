### PART1.자바스크립트 첫발 내딛기



# 001. 웹 콘솔로 코드 실행하기

- 자바스크립트는 코드 오류를 검증하고 실행 결과를 바로 보여주는 도구로 '웹 콘솔(Web Console)'과 '노드(Node) REPL'이 있음
- 브라우저에 내장된 웹 콘솔은 다양한 기능 제공
- 자바스크립트의 콘솔 객체 함수를 통해 명시적으로 오류, 경고 및 정보 메시지등을 출력
- 출력 정보를 확인하는 방식을 응용하여 '디버깅 용도' 로 활용할 수 있음
- 모든 웹 브라우저는 기본적으로 브라우저 객체 모델(Browser Object Model)을 갖고 있음
- 브라우저 객체 모델이란 웹 브라우저와 관련된 객체의 집합을 의미
- 대표적으로 window, location, navigator, history, screen, document 객체가 있음


# 002. Node.js REPL로 코드 실행하기

- cmd창에서 'node'를 입력하면 노드 REPL환경이 실행됨
- REPL은 'Read-Eval-Print-Loop'의 약자로 사용자가 입력한 결과를 바로 반환하는 대화형 Shell환경을 의미

* 기능
- Read : 사용자의 명령어를 입력받으면 메모리에 자바스크립트 데이터 구조로 '분석(Read)' 함
- Eval : 분석한 명령어를 내부 데이터 구조로 가져와서 '평가(Evaluate)' 함 / 평가란 해당 명령어를 실행하는 것을 의미
- Print : Eval에 의해 얻어진 결과를 받아서 사용자에게 '출력(Print)' 함
- Loop : Print까지 완료된 다음, 다시 Read 상태로 돌아가는 환경이 '반복(Loop)' 됨, Ctrl + c 를 입력하면 루프 종료

- REPL 환경은 간단한 자바스크립트 코드를 디버깅 하거나, 노드의 라이브러리를 테스트할 때 유용


# 003. Visual Studio Code로 프로그래밍하기 1

- 앞에 '웹 콘솔'과 'Node.js REPL'은 짧은 코드를 디버깅할 때 유용하지만, 길거나 복잡도가 높은 코드를 작업하기에는 효율성이 떨어짐
- 이러한 경우 '에디터(Editor)'를 활용
- 비주얼 스튜디오 코드 에디터는 다양한 확장 플러그인을 지원
- 그 중 웹 브라우저 환경으로 코드를 쉽게 실행할 수 있는 'Live Server' 확장 플러그인 사용


# 004. Visual Studio Code로 프로그래밍하기 2

- Code Runner 확장 프로그램 사용
- Code Runner 플러그인은 Java, C, C++, JavaScript 등 40여개의 언어를 지원하는 코드 실행을 위한 플러그인

* Live Server와 Code Runner 의 차이점
- Live Server 플러그인은 브라우저 환경에서 자바스크립트 코드를 실행
- Code Runner 플러그인은 쉘 환경에서 각 언어에 맞는 명령어를 사용하여 실행


# 005. 값 (value)과 변수 (variable) 이해하기

- 변수 : 값을 넣어놓는 공간
- 암시적 선언 : 별도의 키워드 없이 변수를 할당하는 방법 / ex) foo = "bar"; / 암시적 선언보다 키워드를 사용하여 변수를 선언하는 것을 권장


# 008. 자료형 이해하기

- 자바스크립트는 크게 두 가지 타입으로 구분 (원시 타입 (Primitive Data Type), 참조 타입 (Reference Data Type))

* 원시 타입
- 값이 변수에 할당될 때 메모리 상에 고정된 크기로 저장됨 / 해당 변수가 직접 값을 보관
- 고정된 공간에 보관된 원시 타입의 값은 변경 불가능한 값, 불변값(Immutable Value)인 특징을 가짐
- 숫자형(Number), 불린형(Boolean), 문자형(String), 심볼형(Symbol), null, undefined

* 참조 타입
- 변수에 고정된 크기를 저장하지 않고, 값의 메모리 주소를 참조
- 객체(Object) 는 속성들(Propertties)의 집합을 의미하며, 집합 내부에는 순서, 크기가 고정되어 있지 않음
- 이러한 고정되지 않은 값을 변수에 할당하려면 직접 해당 값을 저장할 수 없고, 참조해야함
- 참조 타입은 값의 메모리 주소를 변수에 할당하여 값을 참조
- 객체는 { } 안에 '키 : 값' 형태로 이루어진 속성들의 모음 / 키는 반드시 문자형이여야 함 / 속성 키를 통해 해당 속성에 매핑된 값에 접근할 수 있음
































