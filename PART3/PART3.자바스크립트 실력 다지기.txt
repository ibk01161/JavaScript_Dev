### PART3.자바스크립트 실력 다지기



# 060. 표준 내장 객체 이해하기

- 자바스크립트에는 ECMAScript 구현 명세에 의해 정의된 '표준 내장 객체(Standard Built-in Object 또는 Global Objects)' 가 있음
- 표준 내장 객체는 전역 스코프(Scope) 안에 있는 객체들을 참조하고 있어, 자바스크립트를 실행할 때 어떤 환경(브라우저, 서버) 이라도 전역에서 사용 가능
- 몇몇 표준 내장 객체는 객체임에도 불구하고 함수처럼 호출할 수 있음
- 여느 다른 함수처럼 매개변수를 받고, 함수 몸통(중괄호 안의 코드 다발)에 내장 함수 객체의 행위를 특징화 하는 코드들이 구현되어 있음, 이러한 형태를 '내장 함수 객체' 라고 함
- new 지시자를 사용하여 함수 형태로 호출하며, 생성자(Custructor)를 생성, 이외에도 표준 내장 객체 내부에는 속성과 메소드가 정의되어 있음

* 표준 내장 객체의 String, Number, Boolean과 원시 자료형
- 자바스크립트에서는 원시 자료형이 각 성격에 맞게 표준 내장 객체로 자동으로 래핑됨 (문자열로 작성된 값이 String 객체로 래핑된다는 의미)
- 자료형을 확인하면 확연하게 다른 것으로 구분되지만, 원시 자료형 값이지만 표준 내장 객체로 래핑됨에 따라 내장 객체에서 제공하는 메소드나 속성을 가져다 사용할 수 있음

* 자바스크립트의 표준 내장 객체의 종류
1) Object
- 다른 표준 내장 객체의 기본이 되는 일반 객체

2) Number
- 숫자형을 감싼 객체, 숫자형과 관련된 함수와 속성을 갖고 있음

3) String
- 문자형을 감싼 객체, 문자형을 조작하거나 특정 문자열을 찾고 추출하는 등의 메소드와 속성을 활용할 수 있음

4) Array
- 모든 배열은 Array.prototype을 상속받음
- Array 객체는 리스트처럼 배열 역할을 지니며, 배열 요소를 추가/삭제 하거나, 배열 자체를 순회/변형하는 다양한 메소드와 속성을 지니고 있음

5) Math
- 수리 연산을 하기 위한 속성과 메소드를 지닌 내장 객체
- 다른 내장 객체와 달리 Math 객체는 new를 통해 인스턴스를 생성하지 않음, static으로 정의된 속성과 메소드를 직접 호출해야 함

6) Date
- 시간에 관련된 객체
- 현재 시간을 비롯하여, 국제 표준시에 따른 시간 변환 계산도 할 수 있음

7) JSON
- JavaScript Object Notation을 의미
- 이를 다른 자료형으로 변환하거나 다시 JSON으로 변환하는 등의 메소드를 제공하고 있음

8) RegExp
- 정규표현식은 특정 문자열 처리를 위해 사용하는 문자열 패턴 정의를 의미
- 정규표현식을 적용 가능한 문자열 탐색, 비교, 대체 등의 문자열 처리 메소드들을 지원

9) Map
- ES6 부터 표준으로 추가된 Map 객체는 키 : 값 데이터 구조를 지닌 데이터 집합체(Collection)
- 키의 중복성을 허용하지 않으며 관련된 속성, 메소드들을 갖고 있음
- Iterator 를 통해 Map의 데이터를 순회한다는 특징이 있음

10) Set
- ES6부터 표준으로 추가된 객체형으로, 오직 값으로 이루어진 데이터 집합체
- 배열과 비슷하게 느껴질 수도 있으나 내부 속성, 메소드의 구성이 다르고, Iterator로 순회된다는 점, 값의 중복성을 허용하지 않는 차이점이 있음


# 061. 자료형 확인하기 (typeof, instanceof)

- 자바스크립트에서는 typeof와 instanceof로 자료형을 확인할 수 있음


# 062. NaN값 확인하기 (Number.isNaN)

- Number 객체의 isNaN 메소드는 NaN을 구별함, NaN이면 true 반환, NaN이 아니면 false 반환
- NaN 이란 전역 객체의 속성으로 Not a Number(숫자가 아님) 의 줄임말


# 063. 정수 확인하기 (isInteger)

- Number 객체의 isInteger() 메소드는 값이 정수인지 아닌지 확인, 수학적으로 정의된 정수에 대해서는 모두 true, 정수가 아닌 값은 false 반환


# 064. 배열 자료형 확인하기 (isArray)

- 자바스크립트는 변수의 자료형이 동적으로 바뀔 수 있기 때문에 의도한 자료형인지 확인해야 하는 경우가 있음
- isArray 메소드는 배열 자료형 여부를 true/false 로 간단하게 구별할 수 있음

=> Array.isArray(배열)

# 065. 문자열을 숫자형 정수로 변환하기 (parseInt)

- parseInt()는 어떤 내장함수 객체에도 속하지 않은, 전역에서 사용할 수 있는 내장 함수, 문자열 자료형을 숫자로 변환할 수 있음
- parseInt 는 두 개의 인자를 받음, 첫 번째 인자에는 숫자로 변환하고 싶은 값을 넣고, 두 번째 인자에는 특정 진수를 나타내는 정수값을 넣음

=> parseInt(값, 진수);


# 066. 실수형 숫자로 변환하기 (parseFloat)

- parseFloat 함수는 대입된 값을 부동 소수점 숫자로 변환, 만약 값에 숫자, 소수점, 지수 기호가 아닌 다른 값이 들어오는 경우 생략 됨
- parseInt 함수와 동일하게, 어떤 내장 함수 객체에도 속하지 않은 전역에서 사용 가능한 내장 함수

=> parseFloat(값)


# 067. 문자열 양 끝의 공백 없애기 (trim)

- String 내장 객체의 trim 메소드는 문자열 양 끝의 공백, 탭, 줄바꿈을 제거
- 단 함수가 적용된 문자열 원본 값에는 영향을 끼치지 않기 때문에 활용하려면 별도로 값을 저장해야 함

=> s.trim()

# 068. 문자열 자르기 ① (slice)

-  자바스크립트에서는 여러 내장 함수들을 활용하여 다양한 방법으로 문자열을 자를 수 있음
- String 내장객체의 slice 메소드는 인자로 시작 지점의 인덱스와 종료 지점의 인덱스를 받음
- 두 번째 인자인 종료 인덱스는 선택 사항이므로 필수값은 아님, 지정한 범위의 인덱스 문자열을 반환하되, 기존 문자열에 영향을 미치지 않음

=> '문자열'.slice(시작 인덱스, 종료 인덱스)


# 069. 문자열 자르기 ② (substring)

- String 내장객체의 substring 메소드는 인자로 시작 지점의 인덱스과 종료 지점의 인덱스를 받음, 두 번째 인자인 종료 인덱스는 선택 사항이므로 필수값은 아님
- substring 메소드 실행 결과값은 새로운 문자열을 반환하며 기존 문자열을 변경하지 않음
- substring 메소드는 거의 대부분 slice 메소드와 동일하게 수행하지만, 몇 가지 부분에서 다른 결과값을 반환함

=> '문자열'.substring(시작 인덱스, 종료 인덱스)


# 070. 문자열 자르기 ③ (substr)

- String 내장객체의 substr 메소드는 인자로 시작 지점의 인덱스와 길이를 받음, 두 번째 인자인 종료 인덱스는 선택 사항이므로 필수값은 아님
- 지정된 인덱스부터 시작해서 지정된 문자 수 또는 길이 만큼의 새 문자열을 반환
- 추출하고자 하는 문자열의 길이를 정확히 알고 있는 경우 substr 메소드를 활용하는 것이 좋음

=> '문자열'.substr(시작 인덱스, 길이)


# 071. 문자열 길이 구하기 (length)

- length는 String 객체에 미리 정의되어 있는 기본 속성(Property), 이를 통해 문자열의 길이를 구할 수 있음

=> 문자열.length


# 072. 문자열로 변환하기 (toString)

- 자바스크립트의 모든 객체는 Object를 상속받기 때문에, 다른 모든 객체는 prototype을 통해 Object의 내장 메소드 toString()에 접근하고 재정의(Override) 함
- 이는 Object 객체의 toString()을 상속받은 것과 다름

=> str.toString()

# 073. 두 개의 문자열 하나로 합치기 (concat)

- String 내장객체 메소드 중 문자열을 합치는 함수
- 추가로 concat을 사용하는 방법 외에도 '+' 연산자를 활용하여 문자열을 합칠 수 있음
- '+' 연산자가 concat보다 활용면에서 많이 사용됨 => 다른 자료형(숫자)과 문자를 하나의 문자열로 만드는 경우가 일반적으로 많고, '+' 연산자가 concat 메소드 보다 성능상 더 빠르기 때문에 '+' 연산자의 사용을 권장

=> 문자열.concat(문자열2)


# 074. 특정 위치의 문자 반환하기 (charAt)

- String 내장객체 메소드인 charAt()은 숫자형 인자를 받음, 괄호 안에 대입된 값은 문자열에서 인덱스를 가리키고 해당 위치의 문자를 반환

=> 문자열.charAt(숫자형 인자)


# 075. 특정 문자열 위치 확인하기 ① (indexOf)

- String 내장객체의 메소드 indexOf를 활용하면 문자열에서 특정 문자열이 있는지 확인할 수 있음

=> 문자열.indexOf('특정 문자열')


# 076. 특정 문자열 위치 확인하기 ② (lastIndexOf)

- 앞에 indexOf와 달리, lastIndexOf 메소드는 문자열의 뒤에서 부터 일치여부를 확인

=> 문자열.lastIndexOf('특정 문자열')


# 077. 특정 문자열 포함 여부 확인하기 (includes)

- String 내장객체의 메소드 includes는 일치하는 문자열이 있는 경우 true, 없으면 false를 반환함
- 두 번째 인자의 인덱스는 필수값은 아님, 추가로 두 번째 인자에 인덱스를 지정하면, 해당 인덱스 위치에서부터 문자열을 확인
- 두 번째 인자가 없으면 기본값 0 인덱스부터 문자열을 확인

=> 문자열.includes(문자열, 인덱스)


# 078. 문자열 대소문자 변환하기 (toLowerCase, toUpperCase)

- String 내장객체의 메소드 toLowerCase, toUpperCase 를 사용하면 문자열의 대소문자를 일괄 변환할 수 있음

=> '문자열'.toLowerCase(), '문자열'.toUpperCase()


# 079. 배열 요소를 분할 / 변환하기 (from)

- Array 내장객체의 메소드 from은 대입된 문자열 값을 구분자 없이 분할, 그리고 분할된 문자는 배열 요소 각각에 대입되어, 결과값으로 배열을 반환
- 첫번째 인자는 배열요소로 분할 변환될 문자열을 대입, 두번째 인자는 필수값은 아니지만, callback 함수를 대입하면 분할함과 동시에 각 값을 변환시킬 수 있음

=> Array.from(배열로 변환될 값, 반환될 배열 내부 요소에 대한 callback 함수)


# 080. 문자열을 특정 구분자에 의해 배열로 나누기 (split)

- String 내장객체의 메소드 split은 문자열을 배열로 변환하여 반환
- split 인자로 받은 구분자로 문자열을 분리한 후, 각각을 배열 요소에 넣음

=> 문자열.split('구분자')


# 081. 배열 뒤에 요소 추가하기 (push)

- 자바스크립트 배열 자료형은 Linked List 자료구조 형태를 갖고 있음
- 따라서 배열 앞과 뒤에서 요소를 추가하는 것이 가능, Array 내장객체 메소드 push는 배열 뒤에서 요소를 추가

=> 배열.push('요소')


# 082. 배열 앞에 요소 추가하기 (unshift)

- Array 내장객체의 unshift 메소드는 배열 맨 앞에 요소를 추가하는 함수임

=> 배열.unshift('요소')


# 083. 배열 길이 구하기 (length)

- Array 내장객체는 배열의 길이를 확인할 수 있는 length 속성을 갖고 있음

=> 배열.length


# 084. 배열 합치기 (concat)

- Array 내장 객체의 concat 메소드를 사용하여 배열을 병합함

=> 배열.concat(합칠배열)


# 085. 배열에 특정 구분자 넣어 문자형으로 변환하기 (join)

- Array 객체의 메소드 join은 각 배열 요소를 병합하여 하나의 문자열로 변환

=> 배열.join(문자열)


# 086. 배열 마지막 요소 추출하기 (pop)

- Array 객체의 메소드 pop은 배열의 마지막 요소를 추출함
- 이때 원본 배열도 함께 수정되기 때문에 pop 함수를 실행할 때에는 반드시 원본 수정에 대해서 미리 고려해야 함

=> 배열.pop()

# 087. 배열 맨 앞 요소 추출하기 (shift)

- Array 객체의 메소드 shift는 pop 함수와 반대로, 배열의 첫 번째 요소를 추출함
- shift 메소드는 호출과 동시에 원본 배열이 수정되기 때문에 주의해야 함

=> 배열.shift()


# 088. 배열 특정 위치의 요소 추출하기 (slice)

- Array 객체의 메소드 slice는 인덱스의 시작과 끝을 지정하여 배열 요소를 추출
- 의미 그대로 시작 인덱스부터 끝 인덱스까지의 배열 요소를 추출함, 단 끝 인덱스에 있는 요소는 제외하고 그 이전까지의 요소들을 추출함
- slice 함수는 원본 배열을 변경하지 않고 복제(얕은 복사)를 수행, 따라서 slice 함수를 통해 처리된 결과값을 활용하려면 별도의 변수로 대입해야 함

=> 배열.slice(시작 인덱스, 끝 인덱스)


# 089. 배열 인덱스로 특정 요소 수정하기 (splice)

- Array 객체의 메소드 splice는 특정 위치의 요소를 삭제하거나 수정할 수 있음
- 첫 번째 인자인 '시작 인덱스' 는 배열 요소가 변경될 시작 지점, splice는 특정 위치의 요소를 지정하는 것이 필수이므로 반드시 첫 번째 인자값은 배열 길이보다 작아야 유효
- 두 번째 인자인 '삭제할 요소의 개수' 는 시작 인덱스의 위치부터 삭제하고자 하는 개수만큼 요소를 제거함, 이때 해당 요소가 제거됨과 동시에 메소드 호출 결과로 값을 반환함
- 세 번째 인자에 '추가될 요소들' 을 지정하면, 시작 인덱스부터 해당 요소들이 추가됨 

=> 배열.splice(시작 인덱스, 삭제할 요소의 개수, 추가될 요소들 ...)


# 090. 배열의 특정 요소 위치 확인하기 (indexOf)

- Array 객체의 메소드 indexOf는 대입된 값 (첫 번째 인자)을 배열 내부에서 검색함, 값이 일치하는 경우 해당 인덱스를 반환
- 두 번째 인자인 시작 인덱스는 필수값이 아님, 만일 두 번째 인자에 숫자형 값을 넣으면, indexOf는 해당 인덱스부터 값을 찾음, 없으면 indexOf는 숫자 -1을 반환

=> 배열.indexOf(검색할 값, 시작 인덱스)


# 091. 배열 순환하기 (forEach)

- Array 내장 객체의 forEach 메소드는 배열 내부 요소를 순환하며, 각 요소에 대해 callback 함수를 실행

=> 배열.forEach(callback 함수)


# 092. 배열 정렬하기 (sort)

- Array 객체의 sort 메소드는 인자로 비교 함수를 대입하여 배열 요소들을 정렬함, 이때 비교 함수에서 return 으로 반환되는 비교값에 따라 순서가 정해짐

* 비교값의 구체적인 기준
1) 비교값 > 0 : a가 b보다 작은 숫자의 인덱스를 가짐, 배열의 작은 인덱스라는 뜻은 배열에서 앞부분에 위치하는 것을 의미, a가 b보다 앞에 위치
2) 비교값 < 0 : b가 a보다 작은 숫자의 인덱스를 가짐, 아까와 반대로 b가 a보다 앞에 위치
3) 비교값 = 0 : a와 b의 위치를 변경하지 않음

=> 배열.sort(function(a, b) {
	return 비교값;
     }


# 093. 배열의 순서를 반대로 나열하기 (reverse)

- Array 객체의 reverse 메소드는 배열 순서를 반대로 나열, 함수 호출 시 원본 배열을 변형하기 때문에 주의해야 함

=> 배열.reverse()


# 094. 배열 요소가 특정 조건을 만족하는지 확인하기 (some)

- Array 객체의 some 메소드는 callback 함수의 return 값이 true를 반환할 때까지만 배열 요소를 순환
- true를 반환하는 요소의 다음 요소들에 대해서는 더이상 처리하지 않음
- 만일 마지막 요소까지 순환해도 true를 끝내 반환하지 않으면 false를 반환

=> 배열.some()


# 095. 모든 배열 요소가 특정 조건을 만족하는지 확인하기 (every)

- Array 객체의 every 메소드는 배열의 모든 요소가 callback 함수 조건을 만족하는지 확인, 따라서 callback 함수 조건이 한번이라도 false 인 경우, false 반환과 함께 실행이 종료
- 모든 조건 결과가 true 일 때만 every메소드는 true 를 반환



