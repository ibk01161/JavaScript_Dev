### PART3.자바스크립트 실력 다지기



# 060. 표준 내장 객체 이해하기

- 자바스크립트에는 ECMAScript 구현 명세에 의해 정의된 '표준 내장 객체(Standard Built-in Object 또는 Global Objects)' 가 있음
- 표준 내장 객체는 전역 스코프(Scope) 안에 있는 객체들을 참조하고 있어, 자바스크립트를 실행할 때 어떤 환경(브라우저, 서버) 이라도 전역에서 사용 가능
- 몇몇 표준 내장 객체는 객체임에도 불구하고 함수처럼 호출할 수 있음
- 여느 다른 함수처럼 매개변수를 받고, 함수 몸통(중괄호 안의 코드 다발)에 내장 함수 객체의 행위를 특징화 하는 코드들이 구현되어 있음, 이러한 형태를 '내장 함수 객체' 라고 함
- new 지시자를 사용하여 함수 형태로 호출하며, 생성자(Custructor)를 생성, 이외에도 표준 내장 객체 내부에는 속성과 메소드가 정의되어 있음

* 표준 내장 객체의 String, Number, Boolean과 원시 자료형
- 자바스크립트에서는 원시 자료형이 각 성격에 맞게 표준 내장 객체로 자동으로 래핑됨 (문자열로 작성된 값이 String 객체로 래핑된다는 의미)
- 자료형을 확인하면 확연하게 다른 것으로 구분되지만, 원시 자료형 값이지만 표준 내장 객체로 래핑됨에 따라 내장 객체에서 제공하는 메소드나 속성을 가져다 사용할 수 있음

* 자바스크립트의 표준 내장 객체의 종류
1) Object
- 다른 표준 내장 객체의 기본이 되는 일반 객체

2) Number
- 숫자형을 감싼 객체, 숫자형과 관련된 함수와 속성을 갖고 있음

3) String
- 문자형을 감싼 객체, 문자형을 조작하거나 특정 문자열을 찾고 추출하는 등의 메소드와 속성을 활용할 수 있음

4) Array
- 모든 배열은 Array.prototype을 상속받음
- Array 객체는 리스트처럼 배열 역할을 지니며, 배열 요소를 추가/삭제 하거나, 배열 자체를 순회/변형하는 다양한 메소드와 속성을 지니고 있음

5) Math
- 수리 연산을 하기 위한 속성과 메소드를 지닌 내장 객체
- 다른 내장 객체와 달리 Math 객체는 new를 통해 인스턴스를 생성하지 않음, static으로 정의된 속성과 메소드를 직접 호출해야 함

6) Date
- 시간에 관련된 객체
- 현재 시간을 비롯하여, 국제 표준시에 따른 시간 변환 계산도 할 수 있음

7) JSON
- JavaScript Object Notation을 의미
- 이를 다른 자료형으로 변환하거나 다시 JSON으로 변환하는 등의 메소드를 제공하고 있음

8) RegExp
- 정규표현식은 특정 문자열 처리를 위해 사용하는 문자열 패턴 정의를 의미
- 정규표현식을 적용 가능한 문자열 탐색, 비교, 대체 등의 문자열 처리 메소드들을 지원

9) Map
- ES6 부터 표준으로 추가된 Map 객체는 키 : 값 데이터 구조를 지닌 데이터 집합체(Collection)
- 키의 중복성을 허용하지 않으며 관련된 속성, 메소드들을 갖고 있음
- Iterator 를 통해 Map의 데이터를 순회한다는 특징이 있음

10) Set
- ES6부터 표준으로 추가된 객체형으로, 오직 값으로 이루어진 데이터 집합체
- 배열과 비슷하게 느껴질 수도 있으나 내부 속성, 메소드의 구성이 다르고, Iterator로 순회된다는 점, 값의 중복성을 허용하지 않는 차이점이 있음


# 061. 자료형 확인하기 (typeof, instanceof)

- 자바스크립트에서는 typeof와 instanceof로 자료형을 확인할 수 있음


# 062. NaN값 확인하기 (Number.isNaN)

- Number 객체의 isNaN 메소드는 NaN을 구별함, NaN이면 true 반환, NaN이 아니면 false 반환
- NaN 이란 전역 객체의 속성으로 Not a Number(숫자가 아님) 의 줄임말


# 063. 정수 확인하기 (isInteger)

- Number 객체의 isInteger() 메소드는 값이 정수인지 아닌지 확인, 수학적으로 정의된 정수에 대해서는 모두 true, 정수가 아닌 값은 false 반환


# 064. 배열 자료형 확인하기 (isArray)

- 자바스크립트는 변수의 자료형이 동적으로 바뀔 수 있기 때문에 의도한 자료형인지 확인해야 하는 경우가 있음
- isArray 메소드는 배열 자료형 여부를 true/false 로 간단하게 구별할 수 있음

=> Array.isArray(배열)

# 065. 문자열을 숫자형 정수로 변환하기 (parseInt)

- parseInt()는 어떤 내장함수 객체에도 속하지 않은, 전역에서 사용할 수 있는 내장 함수, 문자열 자료형을 숫자로 변환할 수 있음
- parseInt 는 두 개의 인자를 받음, 첫 번째 인자에는 숫자로 변환하고 싶은 값을 넣고, 두 번째 인자에는 특정 진수를 나타내는 정수값을 넣음

=> parseInt(값, 진수);


# 066. 실수형 숫자로 변환하기 (parseFloat)

- parseFloat 함수는 대입된 값을 부동 소수점 숫자로 변환, 만약 값에 숫자, 소수점, 지수 기호가 아닌 다른 값이 들어오는 경우 생략 됨
- parseInt 함수와 동일하게, 어떤 내장 함수 객체에도 속하지 않은 전역에서 사용 가능한 내장 함수

=> parseFloat(값)


# 067. 문자열 양 끝의 공백 없애기 (trim)

- String 내장 객체의 trim 메소드는 문자열 양 끝의 공백, 탭, 줄바꿈을 제거
- 단 함수가 적용된 문자열 원본 값에는 영향을 끼치지 않기 때문에 활용하려면 별도로 값을 저장해야 함

=> s.trim()

# 068. 문자열 자르기 ① (slice)

-  자바스크립트에서는 여러 내장 함수들을 활용하여 다양한 방법으로 문자열을 자를 수 있음
- String 내장객체의 slice 메소드는 인자로 시작 지점의 인덱스와 종료 지점의 인덱스를 받음
- 두 번째 인자인 종료 인덱스는 선택 사항이므로 필수값은 아님, 지정한 범위의 인덱스 문자열을 반환하되, 기존 문자열에 영향을 미치지 않음

=> '문자열'.slice(시작 인덱스, 종료 인덱스)


# 069. 문자열 자르기 ② (substring)

- String 내장객체의 substring 메소드는 인자로 시작 지점의 인덱스과 종료 지점의 인덱스를 받음, 두 번째 인자인 종료 인덱스는 선택 사항이므로 필수값은 아님
- substring 메소드 실행 결과값은 새로운 문자열을 반환하며 기존 문자열을 변경하지 않음
- substring 메소드는 거의 대부분 slice 메소드와 동일하게 수행하지만, 몇 가지 부분에서 다른 결과값을 반환함

=> '문자열'.substring(시작 인덱스, 종료 인덱스)




















