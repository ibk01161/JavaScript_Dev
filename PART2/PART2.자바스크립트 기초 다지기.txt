### PART2.자바스크립트 기초 다지기



# 016. 숫자형 이해하기

- 다른 프로그래밍 언어와 달리 자바스크립트는 숫자의 형태를 구체적으로 나눠 정의하지 않음
- 정수, 부동 소수점, 작은 수, 큰 수 등 여러 유형의 숫자를 '숫자형(Number)' 하나로 정의
- 이외에 자바스크립트에는 Infinity, NaN 값이 있음, 숫자형으로 분류되지만, 일반적인 숫자와는 조금 다른 역할을 수행
- Infinity : 다른 어떤 수 보다 큰 수 (무한대)
- NaN : Not a Number ㄹ는 뜻으로, 산술 연산의 결과가 유효하지 않은 값 또는 숫자가 너무 커서표현할 수 없는 값일 때 표현됨


# 019. null 과 undefined 이해하기

- null : '비어있는, 존재하지 않는 값'을 의미  / 값의 부재를 의미, 원시 자료형 null로 분류
         typeof로 자료형을 확인할 때 object(객체)를 반환하는데 이는 자바스크립트 기존 이슈로 인한 결과이므로 null 이 객체형이라 오해하지 않도록 주의!

- undefined : 변수가 정의되었지만, '아무 값도 할당받지 않은 상태'를 의미
	     예를 들어 함수에서 명시적으로 값을 반환하지 않았을 때 또는 변수에 어떠한 값도 대입하지 않고 정의했을 때 undefined가 반환됨 / undefined 원시 자료형으로 분류됨


# 021. 산술 연산자 (덧셈, 뺄셈, 곱셈, 나눗셈)

- 자바스크립트의 산술 연산자는 숫자형 값 연산에만 국한되지 않음
- 덧셈(+) 연산자인 경우 문자형에 사용 가능 / 두 개 이상의 문자열을 이어 붙일 수 있음 / 나머지 연산자는 문자열 사용X
- 산술 연산자에 =연산자를 함께 사용하는 '산술 등호 연산'도 가능 (+=, -=, *=, /=)
- 이외에도 나머지 연산자(%), 거듭제곱 연산자 (**), 단항음수/양수 (+ / -), 증감 연산자(++ / --) 가 있음


# 022. 비교 연산자

- 비교 연산자는 두 개의 값을 비교하여 true, false 결과값을 반환

* 종류
- 일치 연산자 : 값이 동등한지 비교 (값의 일치 여부)
   - 동등 연산자 (==) : 비교 대상값의 자료형이 서로 다르면 강제로 형을 바꾼 뒤 비교
		     값의 자료형과 상관없이 내용이 같은 경우 참(true)을 반환 / 만약 두 값이 객체형이라면 메모리 주소를 바라보는지 확인
   - 부등 연산자 (!=) : 값이 다른 경우 참(true)을 반환 / 자료형이 다른 경우 동등 연산자와 동일하게 형을 변환하고 비교하게 됨
   - 일치 연산자 (===) : 앞에 연산자들보다 엄격한 기준을 갖고 있음 / 값의 내용과 자료형까지 일치하는지 비교 / 자료형을 임의로 변환하지 않음
   - 불일치 연산자 (!==) : 앞에 연산자들보다 엄격한 기준을 갖고 있음 / 같은 자료형에서 값의 내용이 다르거나 다른 자료혀인 경우 참(true)을 반환

- 관계 연산자 : 값의 관계를 비교 (두 개의 값 간의 크기 비교를 통해 관계를 확인) / >, <, >=, <= 가 있음


# 023. 논리 연산자

- 어떠한 명제에 대한 논리적인 판단을 내리는 연산자 / 참 또는 거짓의 값을 받아 논리적 연산의 결과로 true, false를 반환
- 종류 : AND연산자 '&&', OR연산자 '||', NOT연산자 '!' 가 있고, 결과값은 항상 Boolean 자료형으로 반환
- !! 연산자 : not 연산자에 한 번 더 not 연산자를 처리하는 방법
- Boolean 자료형이 아니더라도 값을 논리 연산자로 처리하면 참인지 거짓인지 구분할 수 있음
- 값의 정보가 유효한 경우 참(true)인 값 : 3, 10, '문자', true, [1, 2, 3], {tom: 'boy'}, function() {}
- 값의 정보가 비어 있는 경우 거짓(false)인 값 : false, 0, -0, "", NaN, null, undefined


# 024. 삼항 연산자

- 삼항 연산자는 if와 switch처럼 조건문을 처리하는 연산자 / 조건문 ? 표현문1 : 표현문2 => 조건문 결과가 true 이면 표현문1 실행, false이면 표현문2


# 026. 자료형 변환 이해하기

- 자바스크립트에서는 자료형 간 변환을 지원함 (숫자형 => 문자형 or 문자형 => 숫자형) => '자료형 변환 (type coercion)', '형변환'
* 변환 방법
1) 개발자가 직접 명시적으로 자료형 변환
2) 자바스크립트 엔진에 의해 자동으로 자료형이 변환되는 방법 : 자바스크립트가 동적 자료형 언어이기 때문에 적용되는 특징


# 027. 배열 이해하기

- 배열 자료형의 형태는 '대괄호 []' 와 괄호 사이의 '요소' 로 구성됨 / 요소가 없는 대괄호 [] 는 빈 배열을 의미
- 배열에 요소들을 나열하는 경우 '콤마(,)'를 통해 구분 => [요소1, 요소2, 요소3]
- 자바스크립트는 동적 자료형 성격을 갖고 있기 때문에, 배열의 길이와 자료형은 고정되지 않음 / 배열의 길이란 '배열 내부의 요소 개수를 계산한 값'


# 028. 객체 이해하기 1

- 여러 개의 값을 한번에 접근할 수 있도록 '객체(Object)' 를 제공하고 있음 (값들을 그룹으로 묶은 데이터 모음)
- 객체는 '중괄호 {} ' 사용, 중괄호 안에 여러 값들을 넣을 수 있는데, 키(Key)와 값(Value)을 한 쌍으로 정의하며 '속성(Properties)' 라고 부름 => {Key : Value}
- 하나의 키(Key)에는 하나의 값이 맵핑, 객체 안에 중복된 키 이름은 허용X
- JSON은 자바스크립트의 객체와 매우 유사한 구조를 지닌 데이터 교환 형식(format)
- JSON 형태는 객체와 비슷하게 키 : 값 쌍의 모음들로 이루어져 있음 (속성 키 이름은 " " 로 표시된 문자열이여야 함 / 값은 오직 문자열, 숫자, 배열, true, false, null 또는 다른 JSON 객체만 가능) => {"Key" : Value}


# 029. 객체 이해하기 2 (속성 접근/추가/수정/삭제)

- 객체의 속성에 접근하는 방법은 객체의 우측에 '콤마 (.)' 를 두고 그 다음에 객체 속성으로 정의된 키 이름을 작성하면 됨 (대괄호 ([]) 안에 키 값을 문자열로 작성하는 방법도 있지만 콤마를 더 선호)
- 객체에 속성을 추가/수정/삭제 방법 또한 속성에 접근하기 때문에 콤마 또는 대괄호를 사용하는 방식과 유사


# 030. ES6의 향상된 객체 문법 알아보기 - 단축 속성명

- 객체 속성을 리터럴로 정의하기 위해서는 '키 : 값' 으로 작성해야만 했음
- '단축 속성명' 을 활용해 객체의 속성을 좀 더 간단하게 정의할 수 있음
- 단축 속성명은 변수가 미리 준비되어 있는 경우 활용 가능하며, '변수명'으로 속성의 키와 값을 한번에 정의할 수 있음


# 031. ES6의 향상된 객체 문법 알아보기 - 속성 계산명

- '속성 계산명'은 속성 이름을 정의하는 다른 방법 / 대괄호 [] 안에 식을 넣거나 변수를 대입하여 동적으로 객체 속성들을 생성할 수 있음











































   - 부등 연산자 : 